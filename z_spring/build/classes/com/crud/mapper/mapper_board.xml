<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<!-- mapper 태그 선언 -->
<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
	<!-- namespace 속성값으로 [DAO 인터페이스명]이 오며 -->
	<!-- [DAO 인터페이스] 메소드명과 동일한 id 값을 소유한 태그를 내포하고 있다. -->
<!--mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm-->
<mapper namespace="com.crud.dao.BoardDAO">


	<!-- ****************************************************** -->
	<!-- 게시판 글 목록 구하는 조건문 설정 -->
	<!-- 공용 sql 태그 안의 id값은 임의로 설정해도 무관하지만  -->
	<!-- <select, update, delete, insert 태그>개별쿼리문의 id값은 항상 boardDAO 인터페이스 안에있는 메소드 이름과 일치해야 한다. -->
	<!-- ****************************************************** -->
	<sql id="boardWhere">
		
		<!-- BoardSearchDTO 객체안의 keyword1 속성변수 안의 데이터를 -->
		<!-- mysbatis 문법으로 ${keyword1} 형식으로 표현한다.  -->
		<!-- $을 붙여 꺼내면   ' 없이 원본대로 그냥 나오고 -->
		<!-- #을 붙여 꺼내면 문자열일 경우   ' 가 자동으로 붙어나온다. -->
		<!-- 현재 아래 SQL 구문에서는  ' 없이 나와야 함으로  $를 사용한다. -->
		<!-- ========================================================================================================= -->
		<!-- ========================================================================================================= -->
		<!-- ========================================================================================================= -->
		<!-- ========================================================================================================= -->
		<!-- 
			<if test="keyword1 != null and keyword1.length()>0">
				<if test="keyword2 == null and keyword2.length()==0">
					and (
							upper(subject) like upper('%${keyword1}%')
							or upper(writer) like upper('%${keyword1}%')
							or upper(content) like upper('%${keyword1}%')
							or upper(to_char(reg_date,'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword1}%')
							or upper(email) like upper('%${keyword1}%')
					)
				</if>	
			</if>
			-->
			<!-- 
			<if test="keyword2 != null and keyword2.length()>0">
				<if test="keyword1 == null and keyword1.length()==0">
					and (
						upper(subject) like upper('%${keyword2}%')
						or upper(writer) like upper('%${keyword2}%')
						or upper(content) like upper('%${keyword2}%')
						or upper(to_char(reg_date,'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword2}%')
						or upper(email) like upper('%${keyword2}%')
					)
				</if>	
			</if>
			
			<if test="(keyword1 != null and keyword1.length()>0) and (keyword2 != null and keyword2.length()>0)">
					and (
					(
						upper(subject) like upper('%${keyword1}%')
						or upper(writer) like upper('%${keyword1}%')
						or upper(content) like upper('%${keyword1}%')
						or upper(to_char(reg_date,'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword1}%')
						or upper(email) like upper('%${keyword1}%')
						)
						${orAnd}
						(
						upper(subject) like upper('%${keyword2}%')
						or upper(writer) like upper('%${keyword2}%')
						or upper(content) like upper('%${keyword2}%')
						or upper(to_char(reg_date,'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword2}%')
						or upper(email) like upper('%${keyword2}%')
						)
					)
			</if> -->
		<!-- ========================================================================================================= -->
		<!-- ========================================================================================================= -->
		
		<!-- ========================================================================================================= -->
		<!-- 만약 키워드1이 있거나 키워드2가 있으면  -->
		<!-- ========================================================================================================= -->
		<if test="( keyword1 != null and keyword1.length()>0 ) or ( keyword2 != null and keyword2.length()>0 )">
            and (
        </if>
     
        <if test="keyword1 != null and keyword1.length()>0">
            (
               upper(subject) like upper('%${keyword1}%')
               or upper(writer) like upper('%${keyword1}%')
               or upper(content) like upper('%${keyword1}%')
              <!--  or upper(to_char(reg_date, 'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword1}%') -->
            
            )
        </if>
        <!-- 만약 키워드1도 있고 키워드2도 있으면 BoardSearchDTO 객체 안의 orAnd라는 속성변수안의 데이터를 싱글쿼트 없이 꺼내어 출력하라. -->
        <if test=" (keyword1 != null and keyword1.length()>0 )  and ( keyword2 != null and keyword2.length()>0 )">
           ${orAnd}
        </if>
         
        <if test="keyword2 != null and keyword2.length()>0">
            (
               upper(subject) like upper('%${keyword2}%')
               or upper(writer) like upper('%${keyword2}%')
               or upper(content) like upper('%${keyword2}%')
             <!--   or upper(to_char(reg_date, 'YYYY-MM-DD AM HH:MI:SS')) like upper('%${keyword2}%') -->
           
            )
        </if>
         
         <!-- 만약 키워드 1이 있거나 키워드2가 있으면  -->
        <if test=" (keyword1 != null and keyword1.length()>0) or (keyword2 != null and keyword2.length()>0)">
           )
        </if>
         <!-- ========================================================================================================= -->
         <!-- ========================================================================================================= -->
         <!-- ========================================================================================================= -->
         <!-- ========================================================================================================= -->
         
         
         
         
		<!-- ================================= -->
		<!-- 만약 BoardSearchDTO 객체의 속성변수 date 가 null 이 아니고 배열변수의 개수가 0 보다 크면 -->
		<!-- [주의] 체크박스 값이 저장되는 배열변수는 배열 객체는 있되 배열변수가 없을 수 있으므로 배열변수의 개수도 0 보다 큰지 확인한다./ -->
		<!-- ================================== -->
		<if test="date != null and date.length>0">
			and
			<!-- ==================================================================== -->
			<!-- mybatis foreach 반복문 의 속성 설명 -->
			<!-- ==================================================================== -->
			<!-- collection="배열/List객체의 속성변수명" -->
			<!-- item="배열" 또는 List 객체안의 데이터를 저장할 지역변수명 -->
			<!-- open="반복문 시작 전에 삽입할 문자" -->
			<!-- separator="반복문 에 의해 표현되는 쿼리문 사이사이에 삽입될 쿼리 일부분" -->
			<!-- close="반복문 끝난 후에 삽입할 문자" -->
			<foreach collection="date" item="date" open="(" separator=" or " close=")">
				<if test="date.equals('오늘')">
					to_char(sysdate,'YYYYMMDD') = to_char(reg_date,'YYYYMMDD')
				</if>
				<if test="date.equals('어제')">
					to_char(sysdate-1,'YYYYMMDD') = to_char(reg_date,'YYYYMMDD')
				</if>
				<if test="date.equals('이번달')">
					to_char(sysdate, 'YYYYMM') = to_char(reg_date, 'YYYYMM')
				</if>
				<if test="date.equals('이번달 이외')">
					to_char(sysdate, 'YYYYMM') != to_char(reg_date, 'YYYYMM')
				</if>
			</foreach>
		</if>
		<if test="viewCnt != null and viewCnt.length>0">
           and
           <foreach collection="viewCnt" item="viewCnt" open="(" separator=" or " close=")">
              <if test="viewCnt.equals('조회수')">
                 readcount &gt;= 100
              </if>
           </foreach>
        </if>
	</sql>

	<!--**************************************************************************-->
	<!-- 게시판 검색하는 select 문을 내포한 select 태그 선언 -->
	<!--**************************************************************************-->
	<select id="getBoardList" parameterType="com.crud.dto.BoardSearchDTO" resultType="java.util.HashMap">
		select * from(select zzz.*,  rownum as "RNUM" from(
			  select
                b_no||''         as "b_no"
                ,subject         as "subject"
                ,writer         as "writer"
                ,to_char(reg_date,'YYYY-MM-DD') "reg_date" 
                ,readcount||'' as "readcount"
                ,content         as "content"
                ,pwd             as "pwd"
                ,group_no||'' 	as "group_no"
				,print_no||'' 	as "print_no"
				,print_level||'' as "print_level" 
				 ,(select count(*) from onlyfile_list_board o where o.b_no=b.b_no)  as "file_cnt"
                ,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
                ,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
			from board_no_id b
			where 1=1
			<!-- ===================================== -->
			<!-- 만약 키워드가 있으면 키워드가  where절에 참여하기  -->
			<!-- ===================================== -->
			
			<!-- ========================================== -->
			<!-- <sql id="boardWhere">태그 안에  삽입된 sql 구문 삽입하기 -->
			<!-- ========================================== -->	
			<include refid="boardWhere"/>
			order by group_no desc, print_no asc <if test="sort!=null">, #{sort}</if>
			) zzz
		) where 
		
		<!-- 아래의 부등호를 그냥 사용할 수 있는 구문 내에는 주석을 사용할 수 없는 단점이 존재 한다. 
		CDATA는 태그안에서는 전부 문자열로 치환
		< 와 같은 기호를 괄호인지 아니면 비교연산자 인지 확인이 되지않음-->
		<![CDATA[
			RNUM >= ${selectPageNo*rowCntPerPage-rowCntPerPage + 1}  
			and 
			RNUM <= ${selectPageNo*rowCntPerPage}
		]]>			
	</select>
 
	<!--*************************************************************-->
	<!-- 게시판 글 목록 총 개수 구하는  select 태그 선언-->
	<!--*************************************************************-->
	<!-- parameterType = 들어오는 객체 자료형. -->
	<select id="getBoardListAllCnt" parameterType="com.crud.dto.BoardSearchDTO" resultType="int">
		select 
			count(*) 
		from board_no_id	
		where 1=1
		<!-- 공용 sql을 가져다가 사용할 수 있도록 하는 코드. -->
		<include refid="boardWhere"/>

	</select>
	<!-- 게시판 기본 정보 입력하는 insert 문을 내포한  insert 태그 선언 -->
	<insert id='insertBoard' parameterType="com.crud.dto.BoardDTO">
		insert into board_no_id(
			b_no
			,subject 		
			,writer 		
			,readcount
			,content 		
			,pwd 						
			,group_no
			,print_no
			,print_level
		) 
		values (
			(select nvl(max(b_no),0)+1 from board_no_id)
			,#{subject}
			,#{writer}
			,#{readcount}
			,#{content}
			,#{pwd}
			<if test="b_no==0">
			,(select nvl(max(b_no),0)+1 from board_no_id)
			, 0
			, 0
			</if>
			<if test="b_no>0">
				, (select group_no from board_no_id where b_no=#{b_no} )
				, (select print_no+1 from board_no_id where b_no=#{b_no} )
				, (select print_level+1 from board_no_id where b_no=#{b_no} )
			</if>
		)
	</insert>
	
	<!-- ******************************************************************** -->
	<!-- 1개 게시판 글 출력번호 수정하고 수정 행의  개수 리천하는 메소드 선언.
&lt;
부등호(<)
&gt;
부등호(>) -->	
	<!-- ******************************************************************** -->
	<update id="updatePrintNo" parameterType="com.crud.dto.BoardDTO" >
		update board_no_id set print_no = print_no+1
   			where group_no=( select group_no from board_no_id where b_no=#{b_no} )
        		and print_no &gt; ( select print_no from board_no_id where b_no=#{b_no} )
	</update>
	
	<!-- ******************************************************************** -->
	<!-- 게시판  1개 글 검색하는 select 문을 내포한 select 태그 선언 -->	
	<!-- ******************************************************************** -->
		<!-- 만약  parameterType이  int,String, double 같이 한개 일 경우 -->
		<!-- SQL 구문 안에서 표현하는  방법은 #{맘대로 스펠링} 또는 ${맘대로 스펠링} 이다. -->
		<!-- 컬럼들의  alias들과  파라미터 명으로 넘어온 값이 같아야 한다. -->
	<select id="getBoardDTO" parameterType="hashmap" resultType="com.crud.dto.BoardDTO">
			select
				b_no 		 "b_no"
				,to_char(subject) 		 "subject"
				,to_char(writer) 		 "writer"
				,to_char(reg_date,'yyyy-mm-dd hh:mm:ss') 		 "reg_date" 
				,readcount		 "readcount"
				,content 		 "content"
				,pwd 			 "pwd"
				,group_no	 	 "group_no"
				,print_no 		 "print_no"
				,print_level	 "print_level"
				,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
				,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
				,( select max(print_level)  from board_no_id where group_no=#{group_no} ) as "max_level"
			from board_no_id b
			where b_no=#{b_no} 
	</select>
	
	<select id="getBoardDTO_without_upReadcount" parameterType="int" resultType="com.crud.dto.BoardDTO">
			select
				b_no 		 "b_no"
				,to_char(subject) 		 "subject"
				,to_char(writer) 		 "writer"
				,to_char(reg_date,'yyyy-mm-dd hh:mm:ss') 		 "reg_date" 
				,readcount		 "readcount"
				,content 		 "content"
				,pwd 			 "pwd"
				,group_no	 	 "group_no"
				,print_no 		 "print_no"
				,print_level	 "print_level"
				,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
				,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
				,( select max(print_level)  from board_no_id where group_no=(select group_no from board_no_id where b_no=#{b_no} )) as "max_level"
			from board_no_id b
			where b_no=#{b_no} 
	</select>
	
	
	<!-- insert, update, delete 문에는 resultType이 없다. 
		이유는 리턴타입이 정수이기 때문에  없다.
	 -->
	<update id="updateReadcount" parameterType="hashmap" >
		update board_no_id set readcount = readcount + 1
		where b_no = #{b_no} 
	</update>
	
	<!-- ============================================================================ -->
	<!-- 게시판 수정 후 수정행의 적용 개수를 리턴하는 메소드 선언 -->
	<update id="updateBoard" parameterType="com.crud.dto.BoardDTO">
		update 
			board_no_id 
		set 
			subject=#{subject}
			, writer=#{writer}
			, content=#{content}
		where
			b_no=#{b_no} 
	</update>
	<update id="updateFileBoard" parameterType="com.crud.dto.BoardDTO">
		update 
			board_no_id 
		set 
			subject=#{subject}
			, writer=#{writer}
			, content=#{content}
		where
			b_no=#{b_no} 
	</update>
	
	
	<!-- 삭제/수정할 게시판의 존재 개수를 리턴하는 select 선언 -->
	<select id="getBoardCnt" parameterType="int" resultType="int" >
		select count(*) from board_no_id where b_no=#{b_no}
	</select>
	<!-- 삭제/수정할 게시판의 암호 존재 개수를 리턴하는 select 선언 -->
	<!-- <select id="getPwdCnt" parameterType="com.naver.erp.BoardDTO" resultType="int" >
		select count(*) from board_no_id where b_no=#{b_no} and pwd=#{pwd}
	</select> -->
	<!-- 삭제할 게시판의 아들글 존재 개수를 리턴하는 select 선언. -->
	<select id="getSonCnt" parameterType="com.crud.dto.BoardDTO" resultType="int" >
		select 
			count(*) 
		from 
			board_no_id
		where group_no=( select group_no from board_no_id where b_no = #{b_no} )
			and print_no=( select print_no+1 from board_no_id where b_no = #{b_no} )
			and print_level=( select print_level+1 from board_no_id where b_no = #{b_no} )
	</select>
	
	<!-- 삭제될 게시판 이후 글의 출력 순서번호를 1씩 감소 시킨 후 수정 적용행의 개수를 리턴하는 update 선언 -->
	<update id="downPrintNo" parameterType="com.crud.dto.BoardDTO">
		update board_no_id set print_no = print_no-1
		where group_no=( select group_no from board_no_id where b_no = #{b_no} )
			and print_no &gt; ( select print_no+1 from board_no_id where b_no = #{b_no} ) 
	</update>
	<!-- 게시판 삭제 명령한 후 삭제 적용행의 개수를 리턴하는 delete 선언. -->
	 <delete id="alldeleteboard" parameterType="com.crud.dto.BoardDTO">
		delete from board_no_id where b_no=#{b_no}  
	</delete>
	<update id="deleteBoard" parameterType="com.crud.dto.BoardDTO">
	     update board_no_id set subject=' ',writer=' ', content=' ' where b_no = #{b_no}
	 </update>
	
	<!-- //답글들중에 답글 있는것만 업데이트 -->
	<update id="replyUpdateCntBoard" parameterType="com.crud.dto.BoardDTO">
	     update board_no_id set subject=' ',writer=' ', content=' '  where b_no = #{b_no}
	 </update>
	<!--  ============================================================================ -->
	<!-- 댓글리스트와 총개수 가져오기 -->
	

	<select id="getCommentDTO" parameterType="int" resultType="java.util.HashMap">
			select
				nvl(b_no,0) 		 "b_no"
				,nvl(b_no_comment,0) 		 "b_no_comment"
				,nvl(c_code,0)  		 "c_code"
				,nvl(b_code,0)  		 "b_code"
				,to_char(comment_detail)		 "comment_detail" 
				,to_char(writer)		 "writer"
				,to_char(comment_reg_date,'yyyy-mm-dd hh:mm:ss') 	 "comment_reg_date"
				,to_char(comment_password) 	 "comment_password"
				,( select count(*) from reg_comment_no_id where b_no=#{b_no}) as "comment_count"
			from reg_comment_no_id
			where b_no=#{b_no} order by  comment_reg_date desc 
	</select> 
	<select id="getCommentListAllCnt" parameterType="int" resultType="int">
		select 
			count(*) 
		from reg_comment_no_id	
		where b_no=#{b_no}
	</select>
	
	<!--  ============================================================================ -->
	<!--댓글등록-->
	<insert id='insertComment' parameterType="hashmap">
		insert into reg_comment_no_id(
			b_no
			,b_no_comment
			,c_code 		
			,b_code 		
			,comment_detail
			,writer 
			,comment_password							
		) 
		values(
			#{b_no}
			,(select nvl(max(b_no_comment),0)+1 from reg_comment_no_id)
			,(select nvl(max(c_code),0)+1 from reg_comment_no_id)
			,(select nvl(max(b_code),0)+1 from reg_comment_no_id)
			,#{comment_detail}
			,#{writer}
			,#{comment_password}
		)
	</insert>
	
	<!-- 댓글 삭제 Hashmap은 대문자- 클래스로 앞에 경로를 다 적어줘야함 -->
	<delete id="deleteComment" parameterType="hashmap">
		delete from reg_comment_no_id where comment_password=#{comment_password} and b_no_comment=to_number(#{b_no_comment})
	</delete>
	
	
	<!--  ============================================================================ -->
	<!--비밀번호 확인-->
	
	<select id="insertPwd" parameterType="hashmap" resultType="int">
		select 
			count(*) 
		from board_no_id	
		where writer=#{writer} and pwd=#{pwd}
	</select>
	
	<!-- //댓글 비번 확인후 삭제 -->
	 <delete id="checkPwdComentDelete" parameterType="int">
		delete from reg_comment_no_id where comment_password=#{comment_password}  
	</delete>
	
	
	<insert id="getNewEmpInsertCnt" parameterType="com.crud.dto.FileUpDTO">
		insert into fileup_list (emp_no, emp_name,emp_email,emp_password
		        ) values (
		        (select nvl(max(emp_no), 0)+1 from fileup_list)
		        ,#{emp_name}
		        ,#{emp_email}
		        ,#{emp_password}
		 )
	</insert>
	
	
<!-- 	<insert id="getOnlyFileCnt" parameterType="com.crud.dto.FileUpDTO">
		insert into onlyfile_list (file_no, emp_no, file_name, contents_type, temp_name
		) values( 
			(select nvl(max(file_no), 0)+1 from onlyfile_list)
			,(select emp_no from fileup_list where emp_no=(select emp_no from fileup_list where emp_name=#{emp_name} and emp_password=#{emp_password}))
			,#{file_name}
			,#{file_name}
			,#{file_name}
		)
	</insert>
	 -->
	
	
	
	
	<!-- 파일 총 개수 -->
	<select id="getFileListAllCnt" resultType="int">
		select 
			count(*) 
		from fileup_list	
		where 1=1
	</select>
	<select id="getFileListBoardAllCnt" resultType="int">
		select 
			count(*) 
		from onlyfile_list_board	
		where 1=1
	</select>
	
	
	
	
	<!-- 파일 리스트   -->
	<select id="getFileList" parameterType="com.crud.dto.FileUpDTO"  resultType="java.util.HashMap">
	select * from (select zzz.*, rownum as "RNUM"  from(select 
             nvl(emp_no,0)    as  "emp_no"
             ,to_char(emp_name)    as "emp_name"
             ,to_char(emp_email)   as  "emp_email"

             ,to_char(reg_date,'yyyy-mm-dd') as "reg_date"
             ,to_char(emp_password)    as "emp_password"    
             ,(select count(*) from onlyfile_list o where o.emp_no=f.emp_no)  as "file_cnt"
    from  fileup_list f where 1=1 order by reg_date desc)zzz)where <![CDATA[
			RNUM >= ${selectPageNo*rowCntPerPage-rowCntPerPage + 1}  
			and 
			RNUM <= ${selectPageNo*rowCntPerPage}
		]]>	
	</select>
	
	<!-- 파일 각내역  -->
	<select id="getFileUpDTO" parameterType="int" resultType="com.crud.dto.FileUpDTO">
	select 
			nvl(emp_no,0)    as  "emp_no"
			,to_char(emp_name)    as "emp_name"
             ,to_char(emp_email)  as  "emp_email"
    from  fileup_list where emp_no=#{emp_no}
	</select>
	
	
	<select id="getFileName" parameterType="int" resultType="String">
	select 
			to_char(file_name)	as "file_name"
    from  onlyfile_list where emp_no=#{emp_no}
	</select>
	
	<select id="gettemp_name" parameterType="int" resultType="String">
	select 
			to_char(temp_name)	as "temp_name"
    from  onlyfile_list where emp_no=#{emp_no}
	</select>
	
	
	<select id="getOnlyFileName" parameterType="int" resultType="String">
	 select   
		to_char(file_name)	as "file_name"
    from  onlyfile_list_board where b_no=#{b_no}  order by  file_reg_date desc
     
	</select>
	
	<select id="getOnlytemp_name" parameterType="int" resultType="String">
	select   
		to_char(temp_name)	as "temp_name"
    from  onlyfile_list_board where b_no=#{b_no}  order by  file_reg_date desc
 
	</select>
	<select id="getProfilePath" parameterType="int" resultType="String">
	select   
		to_char(profilePath)	as "profilePath"
    from  onlyfile_list_board where b_no=#{b_no}  order by  file_reg_date desc
 
	</select>
<!--////////////////////////////////////////////////////////////  -->	
	
	
	
	
	
	
	
 
	<!-- 댓글 1개시 다 전체 삭제 -->
	 <delete id="deleteAllCoandBoard" parameterType="hashmap">
		delete from board_no_id where b_no=to_number(#{b_no}) and print_no=to_number(#{print_no}) and subject=#{subject} 
	</delete>
	
	<!-- 엑셀다운로드  현재페이지  -->
	<select id="getExcelBoardList" parameterType="com.crud.dto.BoardSearchDTO" resultType="java.util.HashMap">
 select * from    
  (select zzz.*, rownum as "RNUM" from(select
                b_no||''         as "b_no"
                ,subject        as "subject"
                ,writer         as "writer"
                ,to_char(reg_date,'YYYY-MM-DD') "reg_date" 
                ,readcount||'' as "readcount"
                ,group_no||'' 	as "group_no" 
                ,print_no||'' 	as "print_no"
				,print_level||'' as "print_level" 
                ,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
                ,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
            from board_no_id b
            where 1=1  order by group_no desc, print_no asc, reg_date desc)zzz) where   
 <![CDATA[
			RNUM >= ${selectPageNo*rowCntPerPage-rowCntPerPage + 1}  
			and 
			RNUM <= ${selectPageNo*rowCntPerPage}
		]]>
			
	</select>	
	
		<!-- 엑셀다운로드  전페페이지 -->
	<select id="getExcelAllBoardList" parameterType="com.crud.dto.BoardSearchDTO" resultType="java.util.HashMap">
 select * from    
  (select zzz.*, rownum as "RNUM" from(select
                b_no||''         as "b_no"
                ,subject        as "subject"
                ,writer         as "writer"
                ,to_char(reg_date,'YYYY-MM-DD') "reg_date" 
                ,readcount||'' as "readcount"
                ,group_no||'' 	as "group_no" 
                ,print_no||'' 	as "print_no"
				,print_level||'' as "print_level" 
                ,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
                ,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
            from board_no_id b
            where 1=1 order by group_no desc, print_no asc, reg_date desc)zzz)    
 
			
	</select>	
	
	<!-- 엑셀 조건 후 저장페이지 -->
		<select id="getExcelBoardListCondition" parameterType="com.crud.dto.BoardSearchDTO" resultType="java.util.HashMap">
 select * from    
  (select zzz.*, rownum as "RNUM" from(select
                b_no||''         as "b_no"
                ,subject        as "subject"
                ,writer         as "writer"
                ,to_char(reg_date,'YYYY-MM-DD') "reg_date" 
                ,readcount||'' as "readcount"
                ,group_no||'' 	as "group_no" 
                ,print_no||'' 	as "print_no"
				,print_level||'' as "print_level" 
                ,( select count(*) from reg_comment_no_id r where r.b_no=b.b_no) as "comment_count"
                ,(select count(*) from board_no_id d where b.group_no=d.group_no) as "group_count"
            from board_no_id b
            where 1=1 <include refid="boardWhere"/> order by group_no desc, print_no asc, reg_date desc)zzz) where   
 <![CDATA[
			RNUM >= ${selectPageNo*rowCntPerPage-rowCntPerPage + 1}  
			and 
			RNUM <= ${selectPageNo*rowCntPerPage}
		]]>
			
	</select>	
	
	<!-- 파일 삭제  -->
	 <delete id="deleteFile" parameterType="hashmap">
		delete from fileup_list where emp_no=#{emp_no} and emp_password=#{emp_password} 
	</delete>
 
	 <delete id="deleteFileBoard" parameterType="com.crud.dto.BoardDTO">
		delete from onlyfile_list_board where b_no=#{b_no}
	</delete>
  
 

	
 	
	<insert id="getNewEmpInsertCnt1" parameterType="hashmap">
		insert into onlyfile_list o(file_no, emp_no, file_name, contents_type, temp_name,profilePath
		) values
 
		( 	(select nvl(max(file_no), 0)+1 from onlyfile_list)
			,(select max(emp_no) from fileup_list)
			,#{originalfileName}
			,#{fileSize}
			,#{saveFileName}
			,#{profilePath}
		)
	 
	</insert>
	
	
	<insert id="getNewEmpInsertCnt2" parameterType="hashmap">
		insert into onlyfile_list_board o(file_no, b_no, file_name, contents_type, temp_name,profilePath
		) values
 
		( 	(select nvl(max(file_no), 0)+1 from onlyfile_list_board)
			,#{b_no}
			,#{originalfileName}
			,#{fileSize}
			,#{saveFileName}
			,#{profilePath}
		)
	 
	</insert>
	
	 <insert id="getNewEmpInsertCnt3" parameterType="hashmap">
		insert into onlyfile_list_board o(file_no, b_no, file_name, contents_type, temp_name,profilePath
		) values
 
		( 	(select nvl(max(file_no), 0)+1 from onlyfile_list_board)
			,(select b_no from board_no_id where b_no=#{b_no})
			,#{originalfileName}
			,#{fileSize}
			,#{saveFileName}
			,#{profilePath}
		)
	 
	</insert>
	
	
	
	
	<insert id="getfilenameUpCnt" parameterType="hashmap">
		insert into onlyfile_list_board o(file_no, b_no, file_name, contents_type, temp_name,profilePath
		) values
 
		( 	(select nvl(max(file_no), 0)+1 from onlyfile_list_board)
			,(select max(b_no) from board_no_id)
			,#{originalfileName}
			,#{fileSize}
			,#{saveFileName}
			,#{profilePath}
		)
	 
	</insert>
	
		<delete id="deleteFileBoardCnt" parameterType="com.crud.dto.BoardDTO">
		delete from onlyfile_list_board where temp_name=#{onlytempname}
	</delete>
<!-- 	
	<select id="getEmp_noForFile" parameterType="com.crud.dto.fileUpDTO"  resultType="java.util.HashMap">
	select 
			emp_no    as  "emp_no"
    from  fileup_list where emp_name=#{emp_name} and emp_password=#{emp_password} and emp_email=#{emp_email}
	</select>
	 -->
	
	
	
	
		
</mapper>	
